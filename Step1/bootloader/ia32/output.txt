
boot.elf:     file format elf32-i386


Disassembly of section .text:

00007c00 <start>:
# memory can be accessed, then calls into our loader, written in C.
###################################################################################
	
.global start					# Entry point
start:		.code16				# This runs in real mode
		cli				# Disable interrupts
    7c00:	fa                   	cli    
		cld				# String operations increment
    7c01:	fc                   	cld    

		# Set up the important data segment registers (DS, ES, SS).
		xorw	%ax,%ax			# Segment number zero
    7c02:	31 c0                	xor    %eax,%eax
		movw	%ax,%ds			# -> Data Segment
    7c04:	8e d8                	mov    %eax,%ds
		movw	%ax,%es			# -> Extra Segment
    7c06:	8e c0                	mov    %eax,%es
		movw	%ax,%ss			# -> Stack Segment
    7c08:	8e d0                	mov    %eax,%ss

		# Set up the stack pointer, growing downward from 0x7c00.
		movw	$start,%sp         	# Stack Pointer
    7c0a:	bc 00 7c e4 64       	mov    $0x64e47c00,%esp

00007c0d <seta20.1>:
####   and subsequent 80286-based PCs wanted to retain maximum compatibility),
####   physical address line 20 is tied to low when the machine boots.
####   Obviously this a bit of a drag for us, especially when trying to
####   address memory above 1MB.  This code undoes this.
	
seta20.1:	inb	$0x64,%al		# Get status
    7c0d:	e4 64                	in     $0x64,%al
		testb	$0x2,%al		# Busy?
    7c0f:	a8 02                	test   $0x2,%al
		jnz	seta20.1		# Yes
    7c11:	75 fa                	jne    7c0d <seta20.1>
		movb	$0xd1,%al		# Command: Write
    7c13:	b0 d1                	mov    $0xd1,%al
		outb	%al,$0x64		#  output port
    7c15:	e6 64                	out    %al,$0x64

00007c17 <seta20.2>:
seta20.2:	inb	$0x64,%al		# Get status
    7c17:	e4 64                	in     $0x64,%al
		testb	$0x2,%al		# Busy?
    7c19:	a8 02                	test   $0x2,%al
		jnz	seta20.2		# Yes
    7c1b:	75 fa                	jne    7c17 <seta20.2>
		movb	$0xdf,%al		# Enable
    7c1d:	b0 df                	mov    $0xdf,%al
		outb	%al,$0x60		#  A20
    7c1f:	e6 60                	out    %al,$0x60

#### Before going to protected mode, query memory size
#### Taken from Linux 2.6.6's arch/i386/boot/setup.S
		stc			# Fix to work around buggy
    7c21:	f9                   	stc    
		xorw	%cx,%cx		# BIOSes which don't clear/set
    7c22:	31 c9                	xor    %ecx,%ecx
		xorw	%dx,%dx		# carry on pass/error of
    7c24:	31 d2                	xor    %edx,%edx
					# e801h memory size call
					# or merely pass cx,dx though
					# without changing them.
		movw	$0xe801,%ax
    7c26:	b8 01 e8 cd 15       	mov    $0x15cde801,%eax
		int	$0x15
		jc	nobiosmem
    7c2b:	72 10                	jb     7c3d <nobiosmem>

		cmpw	$0x0,%cx	# Kludge to handle BIOSes
    7c2d:	83 f9 00             	cmp    $0x0,%ecx
		jne	memdetected	# which report their extended
    7c30:	75 0f                	jne    7c41 <memdetected>
		cmpw	$0x0,%dx	# memory in AX/BX rather than
    7c32:	83 fa 00             	cmp    $0x0,%edx
		jne	memdetected	# CX/DX. The spec I have read
    7c35:	75 0a                	jne    7c41 <memdetected>
		movw	%ax,%cx		# seems to indicate AX/BX
    7c37:	89 c1                	mov    %eax,%ecx
		movw	%bx,%dx		# are more reasonable anyway...
    7c39:	89 da                	mov    %ebx,%edx
		jmp	memdetected
    7c3b:	eb 04                	jmp    7c41 <memdetected>

00007c3d <nobiosmem>:

nobiosmem:	xorw	%cx,%cx
    7c3d:	31 c9                	xor    %ecx,%ecx
		xorw	%dx,%dx
    7c3f:	31 d2                	xor    %edx,%edx

00007c41 <memdetected>:
####	 enabling protected mode it will still appear to this code
####	 that it is running directly on physical memory with no translation.
####	 This initial NOP-translation setup is required by the processor
####	 to ensure that the transition to protected mode occurs smoothly.
	
real_to_prot:	cli				# Mandatory since we dont set up an IDT
    7c41:	fa                   	cli    
		lgdt	gdtdesc			# load GDT -- mandatory in protected mode
    7c42:	0f 01 16             	lgdtl  (%esi)
    7c45:	98                   	cwtl   
    7c46:	7c 0f                	jl     7c57 <protcseg+0x1>
		movl	%cr0, %eax		# turn on protected mode
    7c48:	20 c0                	and    %al,%al
		orl	$CR0_PE_ON, %eax	# 
    7c4a:	66 83 c8 01          	or     $0x1,%ax
		movl	%eax, %cr0		# 
    7c4e:	0f 22 c0             	mov    %eax,%cr0
		### CPU magic: jump to relocation, flush prefetch queue, and reload %cs
		### Has the effect of just jmp to the next instruction, but simultaneous
		### loads CS with $PROT_MODE_CSEG.
		ljmp	$PROT_MODE_CSEG, $protcseg
    7c51:	ea 56 7c 08 00 66 b8 	ljmp   $0xb866,$0x87c56

00007c56 <protcseg>:
	
#### we are in 32-bit protected mode (hence the .code32)
.code32
protcseg:
		# Set up the protected-mode data segment registers
		movw	$PROT_MODE_DSEG, %ax	# Our data segment selector
    7c56:	66 b8 10 00          	mov    $0x10,%ax
		movw	%ax, %ds		# -> DS: Data Segment
    7c5a:	8e d8                	mov    %eax,%ds
		movw	%ax, %es		# -> ES: Extra Segment
    7c5c:	8e c0                	mov    %eax,%es
		movw	%ax, %fs		# -> FS
    7c5e:	8e e0                	mov    %eax,%fs
		movw	%ax, %gs		# -> GS
    7c60:	8e e8                	mov    %eax,%gs
		movw	%ax, %ss		# -> SS: Stack Segment
    7c62:	8e d0                	mov    %eax,%ss

		movl	$0xffff,%eax
    7c64:	b8 ff ff 00 00       	mov    $0xffff,%eax
		andl	%eax,%edx		# clip to 16 bits
    7c69:	21 c2                	and    %eax,%edx
		shll	$6,%edx			# go from 64K to 1K chunks
    7c6b:	c1 e2 06             	shl    $0x6,%edx
		andl	%eax,%ecx		# clip to 16 bits
    7c6e:	21 c1                	and    %eax,%ecx
		addl	%edx,%ecx		# add results
    7c70:	01 d1                	add    %edx,%ecx

		pushl	%ecx			# Push the amount of extended memory
    7c72:	51                   	push   %ecx
		pushl	$DIRECT_BOOT_EAX_MAGIC
    7c73:	68 62 73 6f 6a       	push   $0x6a6f7362
		call	diskboot		# finish the boot load from C.
    7c78:	e8 38 01 00 00       	call   7db5 <diskboot>

00007c7d <spin>:
						# diskboot() should not return
spin:		jmp	spin			# ..but in case it does, spin
    7c7d:	eb fe                	jmp    7c7d <spin>
    7c7f:	90                   	nop

00007c80 <gdt>:
	...
    7c88:	ff                   	(bad)  
    7c89:	ff 00                	incl   (%eax)
    7c8b:	00 00                	add    %al,(%eax)
    7c8d:	9a cf 00 ff ff 00 00 	lcall  $0x0,$0xffff00cf
    7c94:	00 92 cf 00 17 00    	add    %dl,0x1700cf(%edx)

00007c98 <gdtdesc>:
    7c98:	17                   	pop    %ss
    7c99:	00 80 7c 00 00 55    	add    %al,0x5500007c(%eax)

00007c9e <readsect>:
  while ((inb(0x1F7) & 0xC0) != 0x40)
    /* do nothing */ ;
}

static 
void readsect(void *dst, uint32_t offset) {
    7c9e:	55                   	push   %ebp
    7c9f:	89 d1                	mov    %edx,%ecx
    7ca1:	89 e5                	mov    %esp,%ebp
#define X86_INST_ATTR	static __inline __attribute__((always_inline, no_instrument_function))

X86_INST_ATTR
uint8_t inb(uint16_t port) {
  uint8_t data;
  __asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
    7ca3:	ba f7 01 00 00       	mov    $0x1f7,%edx
    7ca8:	57                   	push   %edi
    7ca9:	89 c7                	mov    %eax,%edi
    7cab:	ec                   	in     (%dx),%al
#define ELFHDR		((ELF_EHDR *) 0x5000)	// scratch space

static 
void waitdisk(void) {
  // wait for disk reaady
  while ((inb(0x1F7) & 0xC0) != 0x40)
    7cac:	83 e0 c0             	and    $0xffffffc0,%eax
    7caf:	3c 40                	cmp    $0x40,%al
    7cb1:	75 f8                	jne    7cab <readsect+0xd>
		   "memory", "cc");
}

X86_INST_ATTR
void outb(uint16_t port, uint8_t data) {
  __asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
    7cb3:	ba f2 01 00 00       	mov    $0x1f2,%edx
    7cb8:	b0 01                	mov    $0x1,%al
    7cba:	ee                   	out    %al,(%dx)
    7cbb:	0f b6 c1             	movzbl %cl,%eax
    7cbe:	b2 f3                	mov    $0xf3,%dl
    7cc0:	ee                   	out    %al,(%dx)
    7cc1:	0f b6 c5             	movzbl %ch,%eax
    7cc4:	b2 f4                	mov    $0xf4,%dl
    7cc6:	ee                   	out    %al,(%dx)
  waitdisk();
  
  outb(0x1F2, 1);		// count = 1
  outb(0x1F3, offset);
  outb(0x1F4, offset >> 8);
  outb(0x1F5, offset >> 16);
    7cc7:	89 c8                	mov    %ecx,%eax
    7cc9:	b2 f5                	mov    $0xf5,%dl
    7ccb:	c1 e8 10             	shr    $0x10,%eax
    7cce:	0f b6 c0             	movzbl %al,%eax
    7cd1:	ee                   	out    %al,(%dx)
  outb(0x1F6, (offset >> 24) | 0xE0);
    7cd2:	c1 e9 18             	shr    $0x18,%ecx
    7cd5:	b2 f6                	mov    $0xf6,%dl
    7cd7:	88 c8                	mov    %cl,%al
    7cd9:	83 c8 e0             	or     $0xffffffe0,%eax
    7cdc:	ee                   	out    %al,(%dx)
    7cdd:	b0 20                	mov    $0x20,%al
    7cdf:	b2 f7                	mov    $0xf7,%dl
    7ce1:	ee                   	out    %al,(%dx)
#define X86_INST_ATTR	static __inline __attribute__((always_inline, no_instrument_function))

X86_INST_ATTR
uint8_t inb(uint16_t port) {
  uint8_t data;
  __asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
    7ce2:	ec                   	in     (%dx),%al
#define ELFHDR		((ELF_EHDR *) 0x5000)	// scratch space

static 
void waitdisk(void) {
  // wait for disk reaady
  while ((inb(0x1F7) & 0xC0) != 0x40)
    7ce3:	83 e0 c0             	and    $0xffffffc0,%eax
    7ce6:	3c 40                	cmp    $0x40,%al
    7ce8:	75 f8                	jne    7ce2 <readsect+0x44>
  return data;
}

X86_INST_ATTR
void insl(uint16_t port, void *addr, int cnt) {
  __asm __volatile("cld\n\trepne\n\tinsl"			:
    7cea:	b9 80 00 00 00       	mov    $0x80,%ecx
    7cef:	ba f0 01 00 00       	mov    $0x1f0,%edx
    7cf4:	fc                   	cld    
    7cf5:	f2 6d                	repnz insl (%dx),%es:(%edi)
  // wait for disk to be ready
  waitdisk();
  
  // read a sector
  insl(0x1F0, dst, SECTSIZE / 4);
}
    7cf7:	5f                   	pop    %edi
    7cf8:	5d                   	pop    %ebp
    7cf9:	c3                   	ret    

00007cfa <load_elf>:
    va += SECTSIZE;
    offset++;
  }
}

uint32_t load_elf() {
    7cfa:	55                   	push   %ebp
  
  // If this is too slow, we could read lots of sectors at a time.
  // We'd write more to memory than asked, but it doesn't matter --
  // we load in increasing order.
  while (va < end_va) {
    readsect((uint8_t *) va, offset);
    7cfb:	ba 01 00 00 00       	mov    $0x1,%edx
    va += SECTSIZE;
    offset++;
  }
}

uint32_t load_elf() {
    7d00:	89 e5                	mov    %esp,%ebp
  
  // If this is too slow, we could read lots of sectors at a time.
  // We'd write more to memory than asked, but it doesn't matter --
  // we load in increasing order.
  while (va < end_va) {
    readsect((uint8_t *) va, offset);
    7d02:	b8 00 50 00 00       	mov    $0x5000,%eax
    va += SECTSIZE;
    offset++;
  }
}

uint32_t load_elf() {
    7d07:	57                   	push   %edi
    7d08:	56                   	push   %esi
    7d09:	53                   	push   %ebx
    7d0a:	83 ec 08             	sub    $0x8,%esp
  
  // If this is too slow, we could read lots of sectors at a time.
  // We'd write more to memory than asked, but it doesn't matter --
  // we load in increasing order.
  while (va < end_va) {
    readsect((uint8_t *) va, offset);
    7d0d:	e8 8c ff ff ff       	call   7c9e <readsect>
   * So let's read an entire sector,
   * hoping it is enough.
   */
  readseg((uint32_t) ELFHDR, SECTSIZE , ELF_OFFSET);
  
  if (ELFHDR->e_magic != ELF_MAGIC_LE ||	/* Invalid ELF */
    7d12:	81 3d 00 50 00 00 7f 	cmpl   $0x464c457f,0x5000
    7d19:	45 4c 46 
    7d1c:	75 77                	jne    7d95 <load_elf+0x9b>
    7d1e:	66 83 3d 12 50 00 00 	cmpw   $0x3,0x5012
    7d25:	03 
    7d26:	75 6d                	jne    7d95 <load_elf+0x9b>
  
  /*
   * load each program segment (ignores ph flags)
   * where they are supposed to be in memory.
   */
  ph = (ELF_PHDR *) ((uint8_t *) ELFHDR + ELFHDR->e_phoff);
    7d28:	a1 1c 50 00 00       	mov    0x501c,%eax
  for (i = ELFHDR->e_phnum; i != 0; i--) {
    7d2d:	0f b7 3d 2c 50 00 00 	movzwl 0x502c,%edi
  
  /*
   * load each program segment (ignores ph flags)
   * where they are supposed to be in memory.
   */
  ph = (ELF_PHDR *) ((uint8_t *) ELFHDR + ELFHDR->e_phoff);
    7d34:	8d 98 00 50 00 00    	lea    0x5000(%eax),%ebx
  for (i = ELFHDR->e_phnum; i != 0; i--) {
    7d3a:	85 ff                	test   %edi,%edi
    7d3c:	74 66                	je     7da4 <load_elf+0xaa>
    readseg(ph->p_vaddr, ph->p_memsz, ph->p_offset + ELF_OFFSET);
    7d3e:	8b 43 08             	mov    0x8(%ebx),%eax
 */
static 
void readseg(uint32_t va, uint32_t count, uint32_t offset) {
  uint32_t end_va;
  
  va &= 0xFFFFFF;
    7d41:	89 c1                	mov    %eax,%ecx
  end_va = va + count;
  
  // round down to sector boundary
  va &= ~(SECTSIZE - 1);
    7d43:	25 00 fe ff 00       	and    $0xfffe00,%eax
    7d48:	89 45 f0             	mov    %eax,-0x10(%ebp)
   * load each program segment (ignores ph flags)
   * where they are supposed to be in memory.
   */
  ph = (ELF_PHDR *) ((uint8_t *) ELFHDR + ELFHDR->e_phoff);
  for (i = ELFHDR->e_phnum; i != 0; i--) {
    readseg(ph->p_vaddr, ph->p_memsz, ph->p_offset + ELF_OFFSET);
    7d4b:	8b 43 04             	mov    0x4(%ebx),%eax
 */
static 
void readseg(uint32_t va, uint32_t count, uint32_t offset) {
  uint32_t end_va;
  
  va &= 0xFFFFFF;
    7d4e:	81 e1 ff ff ff 00    	and    $0xffffff,%ecx
  end_va = va + count;
    7d54:	03 4b 14             	add    0x14(%ebx),%ecx
   * load each program segment (ignores ph flags)
   * where they are supposed to be in memory.
   */
  ph = (ELF_PHDR *) ((uint8_t *) ELFHDR + ELFHDR->e_phoff);
  for (i = ELFHDR->e_phnum; i != 0; i--) {
    readseg(ph->p_vaddr, ph->p_memsz, ph->p_offset + ELF_OFFSET);
    7d57:	8d b0 00 02 00 00    	lea    0x200(%eax),%esi
  
  // round down to sector boundary
  va &= ~(SECTSIZE - 1);
  
  // translate from bytes to sectors, and kernel starts at sector 1
  offset = (offset / SECTSIZE);
    7d5d:	c1 ee 09             	shr    $0x9,%esi
  
  // If this is too slow, we could read lots of sectors at a time.
  // We'd write more to memory than asked, but it doesn't matter --
  // we load in increasing order.
  while (va < end_va) {
    7d60:	39 4d f0             	cmp    %ecx,-0x10(%ebp)
    7d63:	73 1a                	jae    7d7f <load_elf+0x85>
    readsect((uint8_t *) va, offset);
    7d65:	8b 45 f0             	mov    -0x10(%ebp),%eax
    7d68:	89 f2                	mov    %esi,%edx
    va += SECTSIZE;
    offset++;
    7d6a:	46                   	inc    %esi
    7d6b:	89 4d ec             	mov    %ecx,-0x14(%ebp)
  
  // If this is too slow, we could read lots of sectors at a time.
  // We'd write more to memory than asked, but it doesn't matter --
  // we load in increasing order.
  while (va < end_va) {
    readsect((uint8_t *) va, offset);
    7d6e:	e8 2b ff ff ff       	call   7c9e <readsect>
    va += SECTSIZE;
    offset++;
    7d73:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  // If this is too slow, we could read lots of sectors at a time.
  // We'd write more to memory than asked, but it doesn't matter --
  // we load in increasing order.
  while (va < end_va) {
    readsect((uint8_t *) va, offset);
    va += SECTSIZE;
    7d76:	81 45 f0 00 02 00 00 	addl   $0x200,-0x10(%ebp)
    7d7d:	eb e1                	jmp    7d60 <load_elf+0x66>
   * where they are supposed to be in memory.
   */
  ph = (ELF_PHDR *) ((uint8_t *) ELFHDR + ELFHDR->e_phoff);
  for (i = ELFHDR->e_phnum; i != 0; i--) {
    readseg(ph->p_vaddr, ph->p_memsz, ph->p_offset + ELF_OFFSET);
    ph = (ELF_PHDR *) ((uint8_t *) ph + ELFHDR->e_phentsize);
    7d7f:	0f b7 05 2a 50 00 00 	movzwl 0x502a,%eax
    7d86:	01 c3                	add    %eax,%ebx
    /* Check that ph does not move passed the end of
     * the single sector we read earlier. If it does,
     * we haven't read enough, and it is bad.
     */
    if ((int)ph+sizeof(ELF_PHDR)>((int)ELFHDR+SECTSIZE))
    7d88:	8d 43 20             	lea    0x20(%ebx),%eax
    7d8b:	3d 00 52 00 00       	cmp    $0x5200,%eax
    7d90:	77 03                	ja     7d95 <load_elf+0x9b>
  /*
   * load each program segment (ignores ph flags)
   * where they are supposed to be in memory.
   */
  ph = (ELF_PHDR *) ((uint8_t *) ELFHDR + ELFHDR->e_phoff);
  for (i = ELFHDR->e_phnum; i != 0; i--) {
    7d92:	4f                   	dec    %edi
    7d93:	eb a5                	jmp    7d3a <load_elf+0x40>
		   "cc");
}

X86_INST_ATTR
void outw(uint16_t port, uint16_t data) {
  __asm __volatile("outw %0,%w1" : : "a" (data), "d" (port));
    7d95:	b8 00 8a ff ff       	mov    $0xffff8a00,%eax
    7d9a:	89 c2                	mov    %eax,%edx
    7d9c:	66 ef                	out    %ax,(%dx)
    7d9e:	b0 e0                	mov    $0xe0,%al
    7da0:	66 ef                	out    %ax,(%dx)
    7da2:	eb fe                	jmp    7da2 <load_elf+0xa8>
     * we haven't read enough, and it is bad.
     */
    if ((int)ph+sizeof(ELF_PHDR)>((int)ELFHDR+SECTSIZE))
      goto bad;
  }
  return ELFHDR->e_entry & 0xFFFFFF;
    7da4:	a1 18 50 00 00       	mov    0x5018,%eax
  outw(0x8A00, 0x8A00);
  outw(0x8A00, 0x8AE0);
  for (;;)
    ;
  return 0; // keep compiler happy.
}
    7da9:	5a                   	pop    %edx
    7daa:	59                   	pop    %ecx
    7dab:	5b                   	pop    %ebx
     * we haven't read enough, and it is bad.
     */
    if ((int)ph+sizeof(ELF_PHDR)>((int)ELFHDR+SECTSIZE))
      goto bad;
  }
  return ELFHDR->e_entry & 0xFFFFFF;
    7dac:	25 ff ff ff 00       	and    $0xffffff,%eax
  outw(0x8A00, 0x8A00);
  outw(0x8A00, 0x8AE0);
  for (;;)
    ;
  return 0; // keep compiler happy.
}
    7db1:	5e                   	pop    %esi
    7db2:	5f                   	pop    %edi
    7db3:	5d                   	pop    %ebp
    7db4:	c3                   	ret    

00007db5 <diskboot>:

void diskboot(uint32_t _eax, uint32_t _ebx) {
    7db5:	55                   	push   %ebp
    7db6:	89 e5                	mov    %esp,%ebp
    7db8:	53                   	push   %ebx
  
  uint32_t entry_point;
  entry_point = load_elf();
    7db9:	e8 3c ff ff ff       	call   7cfa <load_elf>
   * our args.
   */
  uint32_t eax = _eax;
  uint32_t ebx = _ebx;
  uint32_t ecx = entry_point;
  __asm__("jmp *%%ecx": :"a"(eax), "b"(ebx), "c"(ecx));
    7dbe:	8b 5d 0c             	mov    0xc(%ebp),%ebx
}

void diskboot(uint32_t _eax, uint32_t _ebx) {
  
  uint32_t entry_point;
  entry_point = load_elf();
    7dc1:	89 c1                	mov    %eax,%ecx
   * our args.
   */
  uint32_t eax = _eax;
  uint32_t ebx = _ebx;
  uint32_t ecx = entry_point;
  __asm__("jmp *%%ecx": :"a"(eax), "b"(ebx), "c"(ecx));
    7dc3:	8b 45 08             	mov    0x8(%ebp),%eax
    7dc6:	ff e1                	jmp    *%ecx
  
  // note: this function never returns!
}
    7dc8:	5b                   	pop    %ebx
    7dc9:	5d                   	pop    %ebp
    7dca:	c3                   	ret    
